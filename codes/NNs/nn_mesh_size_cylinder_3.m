function [Y,Xf,Af] = nn_mesh_size_cylinder_3(X,~,~)
%NN_MESH_SIZE_CYLINDER_3 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 30-Jun-2021 10:48:32.
% 
% [Y] = nn_mesh_size_cylinder_3(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = 0;
x1_step1_gain = 2.02475205186227;
x1_step1_ymin = -1;

% Layer 1
b1 = [14.06497981046177;-10.98043211155125;8.619667708096804;4.6066100326010089;1.8869622854915067;1.7175217668524192;4.6561575616300184;7.7777952983677281;10.888635848766976;-13.991145387539305];
IW1_1 = [-13.936284020237824;13.900345150542073;-14.239116981107502;-14.008770064009857;-13.951666711479811;13.984879091132626;14.002212446985562;13.999996590166161;14.000252995658922;-14.008854612461256];

% Layer 2
b2 = [1.8101606119826343;-1.1660025889671857;0.76621102417008424;-0.25483290106641837;0.18567255650123002;-0.83819095027877832;-1.1325910438961322;-1.740710613241969];
LW2_1 = [-0.54901352038261364 0.074212612117434962 -0.055005006507386496 -0.86018108294493734 0.25759093628026858 0.83600027543262168 0.78330869453921359 0.59748548689840786 0.15928692036603856 -0.00071121681559665833;0.80737046943917512 0.63152523835122631 0.49198394811055407 0.13555300502681555 -0.27772250863129905 -0.85823170612917921 -0.54974327408596857 0.4327137200976171 -0.54757324441942679 0.54435651184187883;-0.47132801065322588 -0.66050083414710847 3.9047715239500991 0.89952041797148796 0.24908062261956093 0.26503922900802901 0.31584270766326944 0.13046942903520328 -0.12251166496591687 0.45821184160325845;0.093287783767419544 0.86507619046676509 0.64450049591724456 -0.22035720123809369 0.43680947886442167 -0.64349444731097549 -0.56955176179450695 -0.38013131434002195 -0.61647050747912202 -0.76183290212857813;0.58007117123622665 -0.15404920926084242 -1.6819360734727584 -0.17264535666295 -0.71540096257512542 -0.76597057512487321 -0.47588199608021364 -0.5567195536374524 -0.32935106399464176 -0.52802838247616679;-0.8350134935307878 0.51309710111807749 -0.52513814795979208 -0.3628838016659871 0.50894384108969548 0.03524807577641071 -0.95176278792922409 -0.48019908288131941 0.41300524164005448 -0.36778418819471137;-0.36438177642683961 -0.29617929012512306 0.68167858618361621 -0.52503448065451996 0.25303800868491194 0.6910575815281611 0.47194022135604347 0.9590783117374807 0.67967604761243172 -0.56920761283172627;-0.13591563241029245 0.0010335715785031417 0.19366946564782347 -0.6841386682540147 -0.35600435075364967 -0.02103192617214672 0.97421846217245744 -0.60373014113399182 0.86479926666358775 -0.70272509344243905];

% Layer 3
b3 = -0.45146463498401573;
LW3_2 = [-0.38426255466838671 -0.4106093724003575 0.70986163048990936 -0.40311614904526932 0.46606298779475236 0.20500756989012714 -0.039546577731370582 0.63828754856643488];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = 6.23622048775166;
y1_step1_xoffset = 0.801124217988765;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
