function [Y,Xf,Af] = myNeuralNetworkFunction_all(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 06-Jul-2020 15:03:08.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx8 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-10;-10;-10;-10;-10;-10;-10;-10];
x1_step1.gain = [0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.5184668886993075709;1.8714573201012831838;2.4948820442320953639;1.5370021002403220223;-1.710455771252641588;-0.84707175466433159983;-0.75810838057898233266;0.50691510467017342201;0.58659053309121722553;-0.48774709538338667514;-0.25621936584982718532;-0.66003005400993264296;0.2828717511105485749;0.79622707409645410159;0.69398221220782896346;1.5091009731553270967;1.8993984096900637937;2.067741750485333263;1.9713043894378157184;-2.5314727934571759072];
IW1_1 = [-0.60511763162561160723 -0.62311081569658766099 -0.27086196943471296805 0.0015346415944018591132 -0.67273304132298095137 -0.35104154803349835179 -0.37828914126255624994 -0.89341526161025419661;-0.47209087899237633934 -0.53015767522866585892 -0.17775821328768762197 0.056515240296861640745 -0.61304440194529319363 0.179733615903315741 -0.68546522536406440107 -0.35316875470492742339;0.23895256959646568595 -0.50325524977010094307 0.71577945401475751019 0.21631365203467919911 0.5582204482702550763 0.15622260829617595768 -0.30473987278637093556 -0.80663586633859296615;-0.12600206477703634889 0.032264510468493518003 -0.1358191475897733147 -1.0538535197558149825 0.61934240797137940504 0.34183950656108036403 0.8802473073749279564 0.72045328737322711365;0.62211295682762490777 0.19767463194561357698 0.6279745948115492693 -0.29120104344400088436 0.36309550716206462351 -0.41819261535896651294 -0.055263953481189835581 -0.21437656969945217966;0.75839123494421201155 0.65141400636946966696 -0.031504350014183321593 -1.1887692781614804804 0.17236555838089198667 -0.7306203758580380736 -0.052210736243484358321 -0.33880948764438079124;0.72651879109593298089 0.018230887974173347332 0.53081681435528638158 0.85397453881639950879 -0.6972750755049850202 0.36381174160578333421 0.48768905916202198725 -0.64810248644774792748;-1.1845738978239674921 0.12051246790160989597 0.57087843694011131124 0.84645327491198163461 -0.064146774676573342644 -0.48893324291600087639 -0.64940356615003780316 -0.10831632945552623071;0.17662779651480781107 -0.60708490743984155902 0.22191343885710809736 -0.2470980713675950402 0.28391337775403024946 -0.60396597601589907534 0.85427894456835939963 -0.21135429748753317702;0.15461463261466448782 -0.36377997102221010239 0.97817702884766177807 -0.31992363047984745394 -0.019265249957220870192 0.71731085709088437952 -0.12163883458400584492 -0.019715913240761159114;-0.68485254883885537946 -0.23556555289686367805 -0.88708735824627626965 0.83944891332249982341 0.22557144098809955857 -0.49390110546449095263 -0.00047196357416683576078 -1.1510912115953364498;0.21586038538431367995 -0.43645127470220035359 0.0045864331231469943409 -0.41498582535777184255 -0.074664356734298678586 -0.41936906202386731168 0.64967825558919922724 0.081939921060849407741;0.51706831285037146984 0.13466719063414658852 0.79454093762600397355 -0.52406910797311523353 0.20463426076983712298 0.023598657056559186468 0.68490501539033610268 0.3555106636157053801;0.5006578579257668915 -0.49682950803771830373 0.2401925147168590402 -1.0167464960476559899 -0.57343094550588247227 -0.034490683194428356506 0.44485225355245333612 0.50329965568356838101;0.45589714503143180524 0.61207787092481458213 -0.13497045146269215365 -0.73522719502964295479 0.015471542851060960874 -0.57597929117350932238 -0.052975830368235388157 -0.11830815680583427196;0.32198987163865300243 -0.38368253232806615038 1.2874821961822768834 -0.49462879058937153642 0.13818257341438308639 0.81260124528742183614 0.20966273903309348703 -0.13284730814224857132;0.13440968994810856274 -0.13872475327437489012 0.47657472891861185627 0.43473843661600014565 -0.46205171005460254907 -0.36515478944165841169 -0.77798210304108439406 0.75340324770055377979;0.41248188749359149252 -0.56804325859038218294 -0.77613939176797386299 0.14047618887756066486 -0.51947926249732978565 -0.47912106285007072248 0.167187196036280461 -0.37388018012622475927;0.20954190422180321574 -1.1246932595609453465 0.98201389984728759686 -0.37267072637759995901 -0.78795039545180478591 0.28641500839112943311 0.82747204682661701369 -0.52401047876617767862;-0.31910508874570836513 0.45541940525395524508 -1.003630713995226742 0.71562101543314948771 0.094170177235165256069 0.42579409292495279393 0.011635351265321053696 -0.91314737908965881719];

% Layer 2
b2 = [-0.67361107350069449051;0.30022384519020528515];
LW2_1 = [0.058347491464660124205 -0.13606458800395682118 -0.14621526864408337931 0.0049815494983058957248 0.095559715187632301991 0.10826094331967495155 0.0063991020312761954375 -0.012390199443150602329 -0.57954832226828534303 0.55300437173133543123 0.047361471489094836285 -0.77732333143107212869 0.15250304206589540557 -0.19479743117664746754 0.21132698845742306504 0.30976903016829371307 0.043026227926013550784 -0.082913206144357723404 0.099748463569589135291 -0.80970421096412692474;0.10479707546468305934 -0.25921027967142085124 -0.1688495705004306735 -0.004731322834369254722 -0.080747212369973439539 -0.28553382330820781254 -0.013587565734426385392 0.013269575700331315976 0.2821137725429556653 0.58670517226452878479 0.096004767407568816773 0.30717617615023606881 0.22941282090896927826 0.062580192161131434347 -0.52966301877712018698 0.37447261032614698184 -0.0039480768217896649794 -0.01355815519650318407 0.58611835034740689121 0.63451325045437090289];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.1;0.1];
y1_step1.xoffset = [-10;-10];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
