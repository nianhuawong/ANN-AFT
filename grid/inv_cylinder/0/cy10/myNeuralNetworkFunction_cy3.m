function [Y,Xf,Af] = myNeuralNetworkFunction_cy3(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 04-Jul-2020 17:31:44.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx8 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [-10;-10;-10;-10;-10;-10;-10;-10];
x1_step1_gain = [0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1];
x1_step1_ymin = -1;

% Layer 1
b1 = [-0.013840544621692317;4.2920856152395013;0.014464530795190585;0.035386447699968508;0.78940563562050325;-0.69339184389037289;-0.039841335830531205;0.015524220704391278;-3.0823997414642523;1.1065477067018976];
IW1_1 = [-0.051043751066899234 -0.54943725252478681 0.71807352429817528 -0.036631054829002196 -0.11441246301063775 -2.4872974319247123 2.4669874297817649 0.10356107504642457;0.21177295967917548 -3.2472241949099798 -0.76076701775665678 0.03964957506221263 -0.53835581025719048 -8.2665371245581625 7.3465296809920222 0.20231667802286377;0.23362006471734331 3.4061414289977749 -3.4877962447313577 -0.16826672383940508 -0.037833460206496111 1.4293770744729466 -1.2125783603818894 -0.093074016298032802;0.10603109289427712 2.0835502358751934 -2.1068473223007675 -0.1375060638782219 -0.10395709447715658 -1.4271817119273225 1.7463524449136751 0.031407809130700855;0.096438804016713064 0.88351088292201885 -1.7396489876328534 -0.047318006792209787 -0.058145137097522753 -1.305246905343818 0.8462141372014893 0.049495769060984025;-0.14553337095631036 -10.327765768573613 7.2332927039356782 0.37920223498353761 -0.090861576774477898 4.0816951925620293 -6.8322271451368595 0.050565499166573963;-0.087680377583046351 -1.5675738678505446 1.6260832668574603 0.099740550864422253 0.076823063957007359 1.0240820801795705 -1.3145397726163743 -0.029070163100496513;0.0091440940959559552 0.063007117756503431 -0.24306290629851701 -0.00093792707973100768 0.013786194288620317 0.34284432286842642 -0.30383611393741139 -0.011400289620225688;0.12217486449308715 -11.775575022667415 17.72722854977404 0.50510457862662328 -1.5165833466436218 -11.823634796817263 24.694409618104665 0.044083980826758018;-0.10447649863352602 -1.3086566361938161 2.3502668322424327 0.074771839651552402 0.055387434504928203 1.5345878016157346 -0.92220580550343056 -0.060100778249042912];

% Layer 2
b2 = [0.039088636423794676;-0.093509581622366944];
LW2_1 = [-1.0983294304877744 -0.016247849337209415 0.088660867311212838 -2.0421824263401254 -0.051829548845700547 -0.014667696161879858 -2.6807871597401949 -6.2988476427853657 0.013409755193858196 0.077100022769707593;0.031725386062491881 0.059879730299696975 -0.55669836227774938 -3.8120466563352551 -0.89730382820876275 -0.024739848186734557 -5.9270122330380435 2.9160725626548145 0.008541885583091444 0.59770803235978853];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = [0.1;0.1];
y1_step1_xoffset = [-10;-10];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
