function [Y,Xf,Af] = nn_mesh_size_naca_1(X,~,~)
%NN_MESH_SIZE_NACA_1 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 20-Jan-2021 13:21:30.
% 
% [Y] = nn_mesh_size_naca_1(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-4.96249358435749;-5.48121471153668];
x1_step1.gain = [0.183066576565622;0.182441154374485];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.7917256739961482381;-4.7497885952514264929;0.73728488746575382429;2.6043667521586950642;1.4131085650676524779;0.25903887098178984827;5.9689556932159248959;-1.5291330561959746159;-0.2656884963333635552;0.89303375683221930537];
IW1_1 = [-12.363867601842990496 -0.29837289668306482548;3.9275102169968789667 3.6424164972921104777;3.7242471727474790733 -10.644673017125986902;8.1347011827541528817 -5.0089245151447352455;3.6847614447070102806 3.8012403479897556302;-0.5094790850196820875 -3.3673198375008817074;4.0779904064352328064 3.0516553265847066179;5.4121004817690483435 0.55921553606012730508;0.83025261362323665715 -4.0805144112920324062;4.3651795924777099245 13.560974288294261214];

% Layer 2
b2 = -1.2470536225125006258;
LW2_1 = [0.10244841885678529492 -0.32278070128550101492 -0.32188602371657865087 -0.19606458709483809422 -0.40205995702853386531 -0.96031571786730152152 1.7643784956185439849 0.4152298443160262198 0.89783174636849416572 -0.20671605088809918982];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1.85823214434469;
y1_step1.xoffset = 0.000368393390504909;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
