function [Y,Xf,Af] = nn_mesh_size_cylinder_1(X,~,~)
%NN_MESH_SIZE_CYLINDER_1 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 20-Jan-2021 11:32:21.
% 
% [Y] = nn_mesh_size_cylinder_1(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-10;-10];
x1_step1.gain = [0.1;0.1];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.8122247172494594381;-1.0811501361890647477;3.4597183313781423308;2.2356896112259221354;0.024044867195009759359];
IW1_1 = [13.457162229631215666 4.6044365741488268995;-0.55801805675275684138 -7.0046562116085588912;-2.9037610051461024696 -4.7669285985089038249;7.9453549830171761315 8.5038174149484753173;-0.25366517717128639342 -2.2616748857283770491];

% Layer 2
b2 = 0.11077919201342575906;
LW2_1 = [0.25250811602136591372 0.52701063730574515542 0.30562100773254924357 -0.28281837197609532852 -0.9314230860793175637];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1.92573750156646;
y1_step1.xoffset = 0.139860976966175;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
