function [Y,Xf,Af] = nn_mesh_size_cylinder_3(X,~,~)
%NN_MESH_SIZE_CYLINDER_3 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 21-Jan-2021 08:41:21.
% 
% [Y] = nn_mesh_size_cylinder_3(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 0;
x1_step1.gain = 2.02475205186227;
x1_step1.ymin = -1;

% Layer 1
b1 = [4.9836355304352588647;-62.54720624082887781;-75.258894317267092333;-51.070718249697641511;4.8631227687892923939;-1.2110914492912288054;1.1489406846221368319;-2.0025018271724976948;-7.2546075156216680568;3.1671200003176034343];
IW1_1 = [-7.4226675111203297419;103.01019285534110281;123.96137013116613446;84.105220137009368386;-15.96973556834256236;28.979050343528495404;-26.750880017313441783;3.0876628474871470331;10.61553826162761105;-4.769085167361427402];

% Layer 2
b2 = -0.11105773913582231427;
LW2_1 = [-6.8933790616352581537 18.853832628359288748 -10.682798919916571379 -8.6806151298101976721 -0.18880975704372074397 -2.0368263229123018121 -2.0626628203535624095 5.2653525041593756129 -2.2374848179017221561 9.1019952910125780932];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 6.23622048775166;
y1_step1.xoffset = 0.801124217988765;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
