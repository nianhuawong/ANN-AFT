function [Y,Xf,Af] = nn_mesh_size_naca_3(X,~,~)
%NN_MESH_SIZE_NACA_3 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 30-Jun-2021 10:32:12.
% 
% [Y] = nn_mesh_size_naca_3(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = 0;
x1_step1_gain = 2.00345797892709;
x1_step1_ymin = -1;

% Layer 1
b1 = [13.585714251141392;-10.698692682996343;-8.0121610408917086;-3.988737353763868;-0.32281334404440831;-1.3395888906633047;4.7299703443288941;7.1184846757620939;-10.458551189911789;13.829033290421467];
IW1_1 = [-14.530669776496261;14.034406447922548;14.126290018488188;14.482117813306514;14.250606341539092;-13.173532416517082;14.49196865749345;13.818041314224192;-14.20100733341614;14.170967042575658];

% Layer 2
b2 = [1.6896836775772857;1.2815561296826063;-0.81975219545022826;-0.36238939839176976;0.37137152441928034;-0.62381399074442356;1.0514312765409315;-1.7078953630851101];
LW2_1 = [-0.75619899805773161 -0.94166368585672111 -1.4294195967414369 -1.243191205587844 -2.6826153663208281 -0.022575240659202911 0.042922986388147823 -0.4902081078286033 0.020061427578659446 -0.48305964028065324;-0.79283071448165177 -0.18192550233507332 0.11114048739264124 1.5463046970998899 1.1884711347139074 1.3198336474474586 -0.27853782135145511 -0.061495393713086578 0.3317125015426865 0.12631463192696488;0.057296820762775182 -0.58571430143496916 2.1234615237510219 1.2886656119378344 0.48406070324318706 -1.8465423805345631 0.70958535544410706 -0.57416727793301503 -0.24370813045805312 -0.87850018376368233;0.31695795536858551 0.72689379497512918 4.9335855476418287 0.49115946500615043 0.49579383899869178 -0.29075114481303233 0.099186944675210109 -0.5520859756412263 0.77341589777981246 -0.7274574686043026;0.84657380393944037 -0.23869873639360514 -0.076668880364998387 -0.97819009721550687 -0.69388525109240806 -0.67769138050268263 -0.0699716586336252 0.00096953678486499722 -0.37443511986402245 0.92079290886285381;-0.85122769374217466 0.28981399873268276 -1.3012125234380698 0.33389946947827126 -0.55365289444297405 0.11751927900458511 0.11114184627840429 -0.91099246807625101 -1.0708118010397405 1.0958035600608809;-0.038568481720081919 -0.82804974020278155 -0.86686804969615894 -0.49965220053887915 -0.95562311145914092 0.86777198759070073 -0.328432007857064 0.67336503089185351 0.71771453636793081 -0.034375523079385337;-0.0061707692070077204 0.090048566390319884 2.5082012187784395 0.97338082206777532 0.52401641833412282 0.11158605392741894 -0.66614484015481579 0.77664613172047103 -0.19933913370695927 -0.71603827250531338];

% Layer 3
b3 = 0.52595714829927265;
LW3_2 = [-1.0572753826681058 -1.3807913170447264 1.5627429937004893 -0.70292985088922066 -0.58338449203972875 -0.50516879980994722 1.4783986394448543 0.73141339073723288];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = 2.15134498645189;
y1_step1_xoffset = 0.289252767377598;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
