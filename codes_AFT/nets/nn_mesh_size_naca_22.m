function [Y,Xf,Af] = nn_mesh_size_naca_22(X,~,~)
%NN_MESH_SIZE_NACA_22 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 25-Jan-2021 16:37:04.
% 
% [Y] = nn_mesh_size_naca_22(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = 0;
x1_step1_gain = 1.5088069425431;
x1_step1_ymin = -1;

% Layer 1
b1 = [3.9593528026802178;2.4858595045201595;2.9197168188847034;-1.3534062484418747;0.044985354091544319;-0.40432123386367502;1.1663696828589152;2.6114252671347926;-2.5496413974169436;3.4362223142333073];
IW1_1 = [-2.696710832058526;-3.6532238365619905;-4.530277970946341;4.6867218262040691;-3.7668543899752249;-2.3922281078024303;4.4791988354775318;3.660186671195873;-3.5826334602628185;3.5850056930905949];

% Layer 2
b2 = 0.35668877032477869;
LW2_1 = [0.18467228975856684 0.32160146690873637 -0.57135042098783351 0.2837974744807889 -0.43780945921796077 0.86109608188743181 0.5874314123719212 0.31327687198451198 -0.30449166534242239 -1.0185911139602255];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = 2.68584932748007;
y1_step1_xoffset = 0.267743316289184;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
