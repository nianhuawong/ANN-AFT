function [Y,Xf,Af] = nn_mesh_size_cylinder_2(X,~,~)
%NN_MESH_SIZE_CYLINDER_2 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 20-Jan-2021 14:43:24.
% 
% [Y] = nn_mesh_size_cylinder_2(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.01;-1];
x1_step1.gain = [1.2062741037592;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [995475249435949.5;3344416188101675;-2693896579235113;1893475659440441.75;3647078672714485.5;839241108146689;2730747130071184.5;-2797375876204855.5;3175727100385622;-1429806062725151];
IW1_1 = [-4.7943378592704561925 -1352209705072456.25;-0.5465081576078545389 -4542907550855693;2.9009641624355388956 3659270384640136.5;-4.2860839430259911609 -2572013884287519;0.20154683590534938631 -4954030930655125;6.5990001551330728091 -1139988133280794.25;2.8751902105047375535 -3709326548774844;1.06824282563955264 3799832100982007.5;-2.9200738847671128262 -4313767728766994;-4.2658574219461611321 1942185539503749];

% Layer 2
b2 = [-1.7926624562772259797;1.2375930891075024309;1.4469965777069599966;0.96131677522541925107;0.29846848092883043746;0.1199124103290033494;0.043771185270955650926;2.6560109636086961515;0.81333497749551408873;1.706485475174851496];
LW2_1 = [-0.65778581057145057986 -0.65861853038232265334 0.29410963876357282265 0.18869516278181974744 0.0018531295869353605742 -1.0752135834964613448 -0.39068500701713282375 -0.46069480868315909605 -0.74302538489631841934 -0.072488888027781750445;-0.1432326380224525908 0.22224493298400285757 -1.0676938325929550277 -0.59816797767371976402 0.90378736631837575111 1.269727783699683421 0.67441987932138514061 -0.18074061285226269979 0.65116027082103877799 -0.27385888301945843226;-0.74682330798687868167 -0.96470535850586491833 -0.36146107006516597915 1.4984345388296786972 -0.12116428358149233802 0.95803874971686386885 -0.36359670799129267804 0.83351475303371291847 -0.30728603729861797556 -0.89926374231442229856;-0.59214912612660786095 0.28223918846245249492 0.3332876046446230367 0.8203956437052725148 -0.1104752110937661097 0.20139911244028960158 0.80445688828199213294 -0.17058544469380304553 -1.3031541496471970021 0.32849589951340218974;-0.0092058811573306857656 -0.30131268372646824449 -0.23822173824726050606 0.81414649577321507312 -0.66371229304988310638 1.4326743932918351021 -0.10924612046587559022 -0.69332364697203152648 -0.23167303040869705044 -0.35144694143840127243;-0.92155213294651294742 1.6348594975521970607 -0.42149983324814899177 1.504750208334560746 -0.93990186685327403726 -0.06189717602672055452 0.17120869005573835508 -0.94903555087756974462 -0.47270097975801317336 0.30095974583276957626;-0.84218146700240104074 -1.0821663542927313362 -0.65792685740798673155 0.62109847117456795651 0.10115198631640071047 0.94207288030840474757 0.27472266140131640366 -0.0068451504134770663201 0.85375214199513072 -1.2430196834797080374;0.34130129688543570099 -0.65237295169238707082 0.15681711229469422197 -0.26144265266460997577 -0.14422443232501752641 -1.8442529733369532607 0.17912632819252924388 -0.29729647515879642494 1.2087087684099966367 -1.0940473053199735176;-0.13011416567230676966 -1.4095638584679710537 -0.13527166843228463633 -0.59261842035361589343 0.1343293776726730282 -0.90593499345470562822 -0.059948523987431091842 0.080614191290140232993 -0.33259375637573995732 0.081374083339006961224;0.52331974724911700658 0.33937325638530757566 -0.9980478454913223052 0.37995894686706710441 0.98080360497302743195 0.42170695173090133601 0.61238962263488228022 0.050216326071823982891 -0.66250351956902497896 0.56692952860661127712];

% Layer 3
b3 = 0.21760543924291578244;
LW3_2 = [-0.62918821119509793505 0.22429753024946549878 -0.26464401252751790228 0.0019089900803477735224 0.34668008605543498835 -0.11373327533678938284 -0.25608869784660509561 -0.79534429108700654965 0.2020341801498722889 -0.2925467504487148096];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 4.72375315558281;
y1_step1.xoffset = 0.601638381599503;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
