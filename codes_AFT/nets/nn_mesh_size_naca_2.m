function [Y,Xf,Af] = nn_mesh_size_naca_2(X,~,~)
%NN_MESH_SIZE_NACA_2 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 20-Jan-2021 17:18:46.
% 
% [Y] = nn_mesh_size_naca_2(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 0;
x1_step1.gain = 1.5088069425431;
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.2523660950320154583;-3.2035724205222213534;-2.4460658325520348022;-0.59239202278212355068;0.47265604034942132472;0.36859014695249442406;1.4288005990698529057;-1.6347533640603015836;3.130328436375293677;-3.9974149112534780315];
IW1_1 = [3.6313917442311143269;4.6774353345097026136;4.5898352726605500251;4.592281060011002225;5.1039370009477451617;8.1277705706732081836;7.3799590666992900267;-4.4170528821100427663;4.0487929496746835056;-4.1642420438737284272];

% Layer 2
b2 = 0.28043938721822597726;
LW2_1 = [-0.15075736215003762708 0.14891096241494017338 0.18168284083502070358 0.64622947753783477332 -2.2178486360191222992 0.94755877349891814987 0.8873022074537819659 -0.35383805554396996484 0.16957672170123111455 0.63100842939434798051];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.68584932748007;
y1_step1.xoffset = 0.267743316289184;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
