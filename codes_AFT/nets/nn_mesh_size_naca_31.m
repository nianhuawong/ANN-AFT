function [Y,Xf,Af] = nn_mesh_size_naca_31(X,~,~)
%NN_MESH_SIZE_NACA_31 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 27-Jan-2021 17:03:34.
% 
% [Y] = nn_mesh_size_naca_31(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = 0;
x1_step1_gain = 2.00345633024112;
x1_step1_ymin = -1;

% Layer 1
b1 = [-13.437396485105797;-14.047827151290505;18.640988356318537;-10.148798484798576;4.2599697794853428;0.0059251901609589071;6.8198415104973398;-3.492051425554624;-12.519703302661762;-14.538012056273054];
IW1_1 = [17.960022305118226;30.769787950550146;-40.764459691920749;22.262451241701736;-9.3565333622407909;-2.5685233159294332;29.32319666581898;-8.8442132429024571;-13.04998752861734;-13.458257641877422];

% Layer 2
b2 = 0.051565124130221233;
LW2_1 = [0.058486017514795409 7.6709536425326359 4.1295050253069121 -4.449016145761723 -0.96336849094315091 -0.5448827468795292 0.04057380195259104 -0.10477068601499166 0.35422343826887753 -0.16624054148329084];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = 2.70944802045194;
y1_step1_xoffset = 0.338695799732718;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
